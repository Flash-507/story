Step-1: create your project folder, CD into it
ex: ~ 'mkdir <project>'
    ~ 'cd <project>'

step-2: use command git init, to create a git local repository, which tracks the changes in the folder.
ex: ~ git init

step-3: To track changes to a file, add file to staging area.
ex: ~ 'git status' : it displays files which are in staging area or not.
    ~ 'git add <filename.ext>' : it adds the file to staging area.
    ~ 'git add .' : shortcut for multiple files to be added/updated.

step-4: git commit, use this command to add files from staging area to start tracking.
ex: ~ 'git commit -m "<message>"'

step-5: to check all the prev commits, use git log command
ex:  ~ "git log"

step-6: compare a file by using "git diff <filename.ext>", it compares current updated file(not committed) to commited file
ex:  ~ 'git diff chapter3.txt'

step-7: to revert or roll back to committed file, use git checkout <filename.ext>.
ex:  ~ 'git checkout chapter3.txt'

TO Add Project to remote server(GitHub).
step-1: create github account and create a new repository,where u can find a link for that repository,copy that link

step-2: add that remote link to your local project repository, "git remote add origin <repo link>"
ex:  ~ 'git remote add origin https://github.com/Flash-507/story.git'
	note: 'origin'  is name of your remote, you can use any name for it.

step-3: now push your local project into your remote.
ex:  ~ 'git push -u origin main' - 'u': it links local with remote
				 - 'origin main': local data resides in origin repository main branch 



To remove from staging area,
git rm --cached -r <'filename.ext' or '.'>

for cloning, git clone <link>

to ignore some files from commiting, create .gitignore file and write all the file names that u want to ignore

branch
'git branch <name>' - creates a branch.
'git branch' - shows branches
'git checkout <branchname>' - to switch the branch.
